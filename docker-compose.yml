services:
  # nginx:
  #   build:
  #     context: .
  #     dockerfile: "Dockerfile.nginx"
  #   container_name: booking_nginx
  #   ports:
  #     - 80:80
  #     - 443:443
  #   links:
  #     - booking
  #     - flower

  db:
    image: postgres:15
    container_name: booking_db
    volumes:
      - postgresdata:/var/lib/postgresql/data
    env_file:
      - .env
    ports:
      - 1234:${DB_PORT}
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}

  redis:
    image: redis:7
    container_name: booking_redis
    ports:
      - 6379:6379

  booking:
    image: booking_app
    build:
      context: .
    container_name: booking_app
    env_file:
      - .env
    depends_on:
      - db
      - redis
    # Если не работает эта команда, используйте закомментированную
    command: ["/booking/docker/app.sh"]
    # command: sh -c "alembic upgrade head && gunicorn app.main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind=0.0.0.0:8000"
    ports:
      - 8000:8000

  celery:
    image: booking_celery
    build:
      context: .
    container_name: booking_celery
    # Если не работает эта команда, используйте закомментированную
    command: ["/booking/docker/celery.sh", "celery"]
    # command: sh -c "celery --app=app.tasks.celery:celery worker -l INFO"
    env_file:
      - .env
    depends_on:
      - redis

  flower:
    image: booking_flower
    build:
      context: .
    container_name: booking_flower
    # Если не работает эта команда, используйте закомментированную
    command: ["/booking/docker/celery.sh", "flower"]
    # command: sh -c "celery --app=app.tasks.celery:celery flower"
    # При запуске через nginx необходимо запускать команду ниже для корректной работы js и css
    # command: sh -c "celery --app=app.tasks.celery:celery flower --url_prefix=/flower"
    env_file:
      - .env
    depends_on:
      - redis
    ports:
      - 5555:5555

  prometheus:
    image: prom/prometheus:v2.43.0
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheusdata:/prometheus
    restart: unless-stopped
    ports:
      - 9090:9090

  grafana:
    image: grafana/grafana:9.4.7
    container_name: grafana
    volumes:
      - grafanadata:/var/lib/grafana
    restart: unless-stopped
    ports:
      - 3000:3000

volumes:
  postgresdata:
  grafanadata:
  prometheusdata:
  test_postgresdata: